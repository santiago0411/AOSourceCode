// THIS CODE WAS AUTO-GENERATED BY 'IdStructGenerator' TO COMPLETE PARTIAL STRUCT 'NpcId'
// DO *NOT* MODIFY MANUALLY!!

using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using Newtonsoft.Json;

namespace AO.Core.Ids
{
	[JsonConverter(typeof(NpcIdJsonConverter))]
	public readonly partial struct NpcId : IEquatable<NpcId>, IFormattable
    {
        public static readonly NpcId Empty = new(0);

        private readonly UInt16 id;

        private NpcId(UInt16 id)
        {
            this.id = id;
        }

        public static NpcId FromBytes(byte[] bytes, int startIndex)
        {
            return BitConverter.ToUInt16(bytes, startIndex);
        }

        public static implicit operator NpcId(UInt16 id)
        {
            return new NpcId(id);
        }

        public static bool operator ==(NpcId lhs, NpcId rhs)
        {
            return lhs.id == rhs.id;
        }

        public static bool operator !=(NpcId lhs, NpcId rhs)
        {
            return !(lhs == rhs);
        }

        public override bool Equals(object obj)
        {
            return obj is NpcId other && other.id == id;
        }

        public static int Size()
        {
            return sizeof(UInt16);
        }

        public bool Equals(NpcId other)
        {
            return other.id == id;
        }

        public override int GetHashCode()
        {
            return id.GetHashCode();
        }

        public override string ToString()
        {
            return id.ToString();
        }

        public string ToString(string format, IFormatProvider formatProvider)
        {
            return id.ToString(format, formatProvider);
        }

        public UInt16 AsPrimitiveType()
        {
            return id;
        }

        public static NpcId Parse(string value)
        {
            return UInt16.Parse(value);
        }

        public static bool TryParse(string value, out NpcId result)
        {
            bool parsed = UInt16.TryParse(value, out var outVal);
            result = outVal;
            return parsed;
        }
        
		public static Dictionary<NpcId, TValue> ParseDictionary<TValue>([NotNull] IDictionary<string, TValue> baseDictionary)
        {
            var dict = new Dictionary<NpcId, TValue>(baseDictionary.Count);
            foreach (var (key, value) in baseDictionary)
                dict.Add(UInt16.Parse(key), value);
            return dict;
        }

        public class NpcIdJsonConverter : JsonConverter<NpcId>
        {
            public override void WriteJson(JsonWriter writer, NpcId value, JsonSerializer serializer)
            {
                writer.WriteValue(value.AsPrimitiveType());
            }

            public override NpcId ReadJson(JsonReader reader, Type objectType, NpcId existingValue, bool hasExistingValue, JsonSerializer serializer)
            {
                return new NpcId(serializer.Deserialize<UInt16>(reader));
            }
        }
    }
}