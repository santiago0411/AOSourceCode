// THIS CODE WAS AUTO-GENERATED BY 'IdStructGenerator' TO COMPLETE PARTIAL STRUCT 'SpellId'
// DO *NOT* MODIFY MANUALLY!!

using System;
using System.Collections.Generic;
using JetBrains.Annotations;
using Newtonsoft.Json;

namespace AO.Core.Ids
{
	[JsonConverter(typeof(SpellIdJsonConverter))]
	public readonly partial struct SpellId : IEquatable<SpellId>, IFormattable
    {
        public static readonly SpellId Empty = new(0);

        private readonly UInt16 id;

        private SpellId(UInt16 id)
        {
            this.id = id;
        }

        public static SpellId FromBytes(byte[] bytes, int startIndex)
        {
            return BitConverter.ToUInt16(bytes, startIndex);
        }

        public static implicit operator SpellId(UInt16 id)
        {
            return new SpellId(id);
        }

        public static bool operator ==(SpellId lhs, SpellId rhs)
        {
            return lhs.id == rhs.id;
        }

        public static bool operator !=(SpellId lhs, SpellId rhs)
        {
            return !(lhs == rhs);
        }

        public override bool Equals(object obj)
        {
            return obj is SpellId other && other.id == id;
        }

        public static int Size()
        {
            return sizeof(UInt16);
        }

        public bool Equals(SpellId other)
        {
            return other.id == id;
        }

        public override int GetHashCode()
        {
            return id.GetHashCode();
        }

        public override string ToString()
        {
            return id.ToString();
        }

        public string ToString(string format, IFormatProvider formatProvider)
        {
            return id.ToString(format, formatProvider);
        }

        public UInt16 AsPrimitiveType()
        {
            return id;
        }

        public static SpellId Parse(string value)
        {
            return UInt16.Parse(value);
        }

        public static bool TryParse(string value, out SpellId result)
        {
            bool parsed = UInt16.TryParse(value, out var outVal);
            result = outVal;
            return parsed;
        }
        
		public static Dictionary<SpellId, TValue> ParseDictionary<TValue>([NotNull] IDictionary<string, TValue> baseDictionary)
        {
            var dict = new Dictionary<SpellId, TValue>(baseDictionary.Count);
            foreach (var (key, value) in baseDictionary)
                dict.Add(UInt16.Parse(key), value);
            return dict;
        }

        public class SpellIdJsonConverter : JsonConverter<SpellId>
        {
            public override void WriteJson(JsonWriter writer, SpellId value, JsonSerializer serializer)
            {
                writer.WriteValue(value.AsPrimitiveType());
            }

            public override SpellId ReadJson(JsonReader reader, Type objectType, SpellId existingValue, bool hasExistingValue, JsonSerializer serializer)
            {
                return new SpellId(serializer.Deserialize<UInt16>(reader));
            }
        }
    }
}